#!/usr/bin/env python2

# Licensed under GNU General Public License v3 or later
# Written by Sebastian Lohff (seba@seba-geek.de)

from __future__ import print_function

__version__ = "0.1"

import argparse
import errno
import os
import shlex
import sys
import re

from Crypto.PublicKey import RSA

from twisted import cred, internet
from twisted.internet import reactor, error
from twisted.python import components, filepath, failure, log
from twisted.cred import portal, checkers
from twisted.conch import avatar, interfaces as conchinterfaces, checkers as conchcheckers
from twisted.conch.ls import lsLine
from twisted.conch.ssh import filetransfer, session, factory, keys
from twisted.conch.ssh.filetransfer import SFTPError, FX_PERMISSION_DENIED, FXF_READ, FXF_WRITE, FXF_APPEND, FXF_CREAT, FXF_TRUNC, FXF_EXCL
from zope.interface import implements


class SCPProtocol(internet.protocol.Protocol, log.Logger):
	""" Implementation of SCP, description from https://blogs.oracle.com/janp/entry/how_the_scp_protocol_works """
	# TODO: Refactor everything to work with partial messages (e.g. read single bytes, put remainings pack in statemachine)
	# TODO: Catch all the exceptions which could be thrown by sftpserver
	# TODO: In which state to we transition in case of an error?
	# TODO: Handle -p / "P"

	CHUNK_SIZE = 5 * 1024 * 1024
	S_CONT, S_ERR, S_DONE = range(3)

	def __init__(self, cmd, avatar):
		self.cmd = cmd
		self.avatar = avatar
		self.sftpserver = LimitedSFTPServer(avatar)
		self.state = "init"
		print("SCP launched with args", self.cmd)

		self._parser = self._genParser()
		try:
			self.args = self._parser.parse_args(cmd[1:])
			print(self.args)
		except SystemExit:
			self.args = None
			print("Error: Parser could not parse cmd", cmd)
			self.state = "cmd-parse-error"

		if self.args:
			self.sinkMode = self.args.f

	def _genParser(self):
		parser = argparse.ArgumentParser()

		parser.add_argument("target", type=str, help="File/dir to copy")
		parser.add_argument("-f", action="store_true", help="Source mode")
		parser.add_argument("-t", action="store_true", help="Sink mode")
		parser.add_argument("-p", action="store_true", help="Preserve access times (used with -f)")
		parser.add_argument("-r", action="store_true", help="Recursive mode, directories and stuff")
		parser.add_argument("-d", action="store_true", help="Target should be a directory")
		parser.add_argument("-v", action="store_true", help="Be more verbose. Currently ignored")

		return parser

	def logPrefix(self):
		return "SCPProtocol"

	def _initSendFile(self, path):
		self._file = {'path': path, 'state': 'init', 'stat': None, 'fileObj': None}

	def _sendFile(self):
		""" Assumes path exists """
		print("called _sendFile(),", self._file)
		path = self._file['path']
		stat = self._file['stat']
		needContinue = None

		if self._file['stat'] == None:
			try:
				self._file['stat'] = self.sftpserver.getAttrs(path, followLinks=True)
				if os.path.isdir(os.path.realpath(self.sftpserver._fixPath(path))):
					raise OSError(errno.EISDIR, os.strerror(errno.EISDIR))
			except OSError as e:
				self._file["state"] = "done"
				msg = "scp: %s: %s" % (path, e.strerror)
				self.sendError("error", msg)
				return self.S_ERR
			stat = self._file['stat']

			try:
				self._file['fileObj'] = self.sftpserver.openFile(path, FXF_READ, {})
			except (SFTPError, OSError) as e:
				self._file['state'] = "done"
				self.sendError(path, str(e))
				return self.S_ERR

		if self.args.p and self._file['state'] == 'init':
			# Access time of file, format: T<mtime> <mtime-ms> <atime> <atime-ms>
			print(" -- send access times for", path)
			self.transport.write("T%d %d %d %d\n" % (stat['mtime'], 0, stat['atime'], 0))
			self._file['state'] = "psend"
			needContinue = True
		elif self._file['state'] in ('init', 'psend'):
			# Single file copy, format: Cmmmm <length> <filename>
			# mmmm == mode in octal
			print(" -- send file %s (%s)" % (path, "C%04o %d %s" % (stat["permissions"] & 07777, stat["size"], os.path.basename(path))))
			self.transport.write("C%04o %d %s\n" % (stat["permissions"] & 07777, stat["size"], os.path.basename(path)))
			self._file['state'] = "copy"
			needContinue = True
		elif self._file['state'] == "copy":
			print(" -- send file contents")
			p = 0
			fileObj = self._file['fileObj']
			data = fileObj.readChunk(0, self.CHUNK_SIZE)
			while data != '':
				print(" !!!! Sending chunk of data: (data: %s, length: %d)" % (repr(data), len(data)))
				#self.transport.write(data)
				self.transport.write(data)
				p += self.CHUNK_SIZE
				data = fileObj.readChunk(p, self.CHUNK_SIZE)

			print("Done sending file", path)
			self.transport.write("\x00")
			needContinue = False
			self._file["state"] = "done"
		else:
			print("WARNING WARNING WARNING: unknown state", self._file['state'])
			needContinue = False

		if needContinue:
			return self.S_CONT
		else:
			return self.S_DONE

	def _initSendDirectory(self, path):
		self._dirStack = [{'path': path, 'files': None, 'dirs': None}]

	def _sendDirectory(self):
		if len(self._dirStack) == 0:
			print("Warning: _sendDirectory() called when already done.")
			return self.S_ERR
		print("called _sendDirectory,", self._dirStack[-1])
		curr = self._dirStack[-1]
		if curr["files"] == None:
			# directory not read, do it now
			handle = None
			try:
				handle = self.sftpserver.openDirectory(curr['path'])
			except OSError as e:
				self.sendError(curr['path'], e.strerror)
				self._dirStack.pop(-1)
				return self.S_ERR

			files, dirs = ([], [])
			for (name, lsline, attrs) in handle:
				#if lsline.startswith("d"):
				if os.path.isdir(os.path.realpath(self.sftpserver._fixPath(os.path.join(curr["path"], name)))):
					dirs.append(name)
				else:
					files.append(name)
			curr["dirs"] = dirs
			curr["files"] = files

			# as the directory is new, we send a.. new... directory!
			# message format: Dmmmm <length> <name>
			# TODO: Exception catching
			stat = self.sftpserver.getAttrs(curr["path"], followLinks=True)
			print(" -- send dir", curr["path"], "D%04o %d %s" % (stat["permissions"] & 07777, 0, os.path.basename(curr["path"])))
			self.transport.write("D%04o %d %s\n" % (stat["permissions"] & 07777, 0, os.path.basename(curr["path"])))
		elif len(curr["files"]) > 0:
			f = curr["files"].pop(0)
			(os.path.join(curr["path"], f))
			self._initSendFile(os.path.join(curr["path"], f))
			self.state = "sending-dir-file"
			self._stateMachineNext(None)
		elif len(curr["dirs"]) > 0:
			d = curr["dirs"].pop(0)
			self._dirStack.append({'path': os.path.join(curr["path"], d), 'files': None, 'dirs': None})
			return self._sendDirectory()
		else:
			# done with this dir
			self._dirStack.pop(-1)
			print(" -- end dir", curr["path"])
			self.transport.write("E\n")
			if len(self._dirStack) > 0:
				return self.S_DONE
		return self.S_CONT

	def _initRecvFile(self, name, length, mode):
		print("initrecvfile")
		path = os.path.join(self.args.target, name)
		# try to open file, if fail send error
		fileObj = None
		try:
			fileObj = self.sftpserver.openFile(path, FXF_WRITE | FXF_CREAT, {'permissions': mode})
		except (SFTPError, OSError, IOError) as e:
			self.sendError("Error opening file", e.strerror if getattr(e, "strerror") else e.message)
		else:
			print("Successfully receiving file")
			self.state = "recv-file"
			self._file = {'name': name, 'length': length, 'mode': mode, 'fileobj': fileObj, 'recvd': 0}
			self.transport.write("\x00")

	def _recvFile(self, data):
		# check if recvd + datalen > length, only read (write) what's necessary
		# if done change state back
		# if data left when done call statemachine with it
		leftToSend = self._file['length'] - self._file['recvd']
		if len(data) >= leftToSend:
			chunk = data[0:leftToSend]
		else:
			chunk = data
		self._file['fileobj'].writeChunk(self._file['recvd'], chunk)

		self._file['recvd'] += len(data)
		if len(data) >= leftToSend:
			# handle state machine stuff
			self._file['fileobj'].close()
			self._file = None
			self.state = "recv-file-ack"

			# if data left ==> back
			if len(data) > leftToSend:
				self._stateMachineNext(data[leftToSend:])

	def _initRecvDir(self, name, mode):
		print("initrecvdir", name, mode)
		basepath = None
		if len(self._dirStack) > 0:
			basepath = os.path.join(self._dirStack[-1]["path"], name.lstrip("/"))
		else:
			basepath = os.path.join(self.args.target, name)

		self._dirStack.append({"path": basepath, "name": name, "mode": mode})
		attrs = None
		try:
			attrs = self.sftpserver.getAttrs(basepath, followLinks=True)
		except OSError:
			pass

		print("my dir is", basepath, "with name", name, "and mode", mode)
		if attrs != None:
			if not attrs["isDir"]:
				self.sendError("error", "Path %s already exists and is a file" % (basepath,))
				return
		else:
			print("Creating directory", basepath)
			# TODO: Exception catching
			self.sftpserver.makeDirectory(basepath, {"permissions": mode})

		self.transport.write("\x00")


	def _stateMachineNext(self, data, init=False):
		print("called _stateMachineNext(%s, %s) with state %s" % (repr(data), init, self.state))
		if init:
			if self.state == "init":
				realpath = self.sftpserver._fixPath(self.args.target)
				pathIsDir = os.path.isdir(realpath)
				if pathIsDir and self.args.r:
					self.singleFile = False
				else:
					self.singleFile = True

				if self.args.d and not pathIsDir:
					self.sendError("error", "Target is not a directory (was requested with -d)", fatal=True)
					self.state = "borken"

				if self.args.f:
					# source mode, send file or dir
					self.sourceMode = True
					if os.path.isdir(realpath) and self.args.r:
						self.singleFile = False
						self._dirStack = []
					else:
						self.singleFile = True
				elif self.args.t:
					self._dirStack = []
					self.sourceMode = False
					# check if writable
					if not self.sftpserver.chrootSpecs.allowWrite:
						print("Write not allowed")
						self.sendError("Error", "Write not allowed by server", fatal=True)
					else:
						# we need to begin ==> iterate state
						self._stateMachineNext(None)
				else:
					self.sendError("Error", "please specify either -t or -f", fatal=True)
			elif self.state == "cmd-parse-error":
				print("Sending parse error")
				self.sendError("Error", "could not parse command options (given: %s)\n" % (" ".join(self.cmd[1:])), fatal=True)
			else:
				print("Error: Unknown state in init phase of state machine, state was", self.state)
		else:
			# iterate state!
			if self.sourceMode:
				if self.state == "init":
					if data != "\x00":
						self.sendError("error", "Expected a 0x00 to initiate file transfer", fatal=True)
						return
					if self.singleFile:
						self._initSendFile(self.args.target)
						self.state = "sending-file"
					else:
						self._initSendDirectory(self.args.target)
						self.state = "sending-dir"
					self._stateMachineNext(None)
				elif self.state == "sending-dir":
					ret = self._sendDirectory()
					if ret != self.S_CONT:
						if ret == self.S_ERR:
							# error, continue with state machine
							self._stateMachineNext(None)
						else:
							self.state = "borken"
							print("Losing connection")
							self.transport.loseConnection()
				elif self.state in ("sending-file", "sending-dir-file"):
					ret = self._sendFile()
					if ret != self.S_CONT:
						if self.state == "sending-dir-file":
							self.state = "sending-dir"
							if ret == self.S_ERR:
								# in case of error, call next state
								self._stateMachineNext(None)
						else:
							print("Losing connection")
							self.transport.loseConnection()
							self.state = "borken"
				elif self.state == "quit-after-data":
					print("Losing connection")
					self.transport.loseConnection()
					self.state = "borken"
				elif self.state == "borken":
					print("broken, ignore")
				else:
					raise ValueError("unknown state %s" % self.state)
			else:
				if self.state == "init":
					# send them a zero to show that we're fine with things!
					self.transport.write("\x00")
					self.state = "recv-ctrl-msg"
				elif self.state == "recv-ctrl-msg":
					# parse a message!
					remainingData = None
					if data[0] in ('C', 'D', 'T', 'E', '\x00', '\x01', '\x02'):
						splitData = data.split("\n", 1)
						if len(splitData) > 1 and splitData[1] != '':
							remainingData = splitData
						thisData = splitData[0]
						msgType = thisData[0]
						msg = thisData[1:].rstrip().split(" ")
						print(" >> Control message", msgType, "with args", " ".join(msg))
						if msgType == "C":
							if len(msg) != 3:
								self.sendError("Protocol Error", "Command 'C' takes ecactly 3 commands (%d given)" % len(msg), fatal=True)
							mode, length, name = None, None, None
							try:
								mode = int(msg[0], 8)
								length = int(msg[1])
							except ValueError:
								self.sendError("Protocol Error", "mode and length of 'C' command both need to be ints", fatal=True)
							else:
								name = msg[2]
								# changes state if necessary, acks msg etc.
								self._initRecvFile(name, length, mode)
						elif msgType == "D":
							if self.singleFile:
								self.sendError("Error", "Stop sending directories when you are not recursive!", fatal=True)
								return

							if len(msg) != 3:
								self.sendError("Protocol Error", "Command 'D' takes ecactly 3 commands (%d given)" % len(msg), fatal=True)
							mode, length, name = None, None, None
							try:
								mode = int(msg[0], 8)
								length = int(msg[1])
							except ValueError:
								self.sendError("Protocol Error", "mode and length of 'D' command both need to be ints", fatal=True)
							else:
								name = msg[2]
								# changes state if necessary, acks msg etc.
								self._initRecvDir(name, mode)
						elif msgType == "T":
							pass
						elif msgType == "E":
							if self.singleFile:
								self.sendError("Error", "You are in single file mode, you are not allowed to send 'E'")
							elif len(self._dirStack) <= 0:
								self.sendError("Protocol error", "There is no directory left to end for command 'E'")
							else:
								self._dirStack.pop(0)
								self.transport.write("\x00")
						elif msgType == "\x00":
							# ack!
							print("out of range ack, guess we are going to close this connection")
							self.transport.write("\x00")
							print("Losing connection")
							self.transport.loseConnection()
							self.state = "borken"
						elif msgType == "\x01":
							# warning
							print("User sent a warning, we are just going to ignore it (warning was %s)" % thisData[1:])
							pass
						elif msgType == "\x02":
							print("Client sent fatal error:", data[1:])
							print("Losing connection")
							self.transport.loseConnection()
							self.state = "borken"
						else:
							self.sendError("Protocol Error", "Unknown control message type '%s'" %   (repr(msgType),), fatal=True)

						if remainingData != None:
							self._stateMachineNext(remainingData)
					else:
						print("unknown control data", repr(data))
						self.sendError("Protocol Error", "Well, I expected a control message from you and I found something starting with a '%s'. What a shame." % repr(msgType), fatal=True)
				elif self.state == "recv-file":
					self._recvFile(data)
				elif self.state == "recv-file-ack":
					if data == "\x00":
						self.transport.write("\x00")
						print("File received successfully!")
					else:
						print("Error receiving file, dunno. data was", repr(data))

					self.state = "recv-ctrl-msg"
				else:
					print("Unknown sink-mode state")

		print(" ?? _stateMachineNext is now in state", self.state)

	def sendError(self, errCat, errMsg, fatal=False):
		errbyte = "\x02" if fatal else "\x01"
		msg = "scp: %s: %s\n" % (errCat, errMsg)
		print(msg)

		self.transport.write("%s%s" % (errbyte, msg))
		if fatal:
			self.state = "borken"
			self.scpDisconnect(1)

	def scpDisconnect(self, statuscode):
		print("Disconnecting scp service")
		self.transport.processEnded(reason=failure.Failure(error.ProcessTerminated(int(statuscode))))
		self.state = "borken"

	def connectionMade(self):
		print("Connected scp")
		self._stateMachineNext(None, init=True)

	def dataReceived(self, data):
		print("===> DATA:", repr(data), "state:", self.state)
		self._stateMachineNext(data)

	def eofReceived(self):
		print("NOTE: Eof received")
		# TODO: differentiate depending on state
		if self.sourceMode:
			# source mode errors?
			pass
		else:
			if not self.singleFile:
				if len(self._dirStack) > 0:
					self.sendError("Protocol error", "Unexpected EOF - there were directories left to send/end", fatal=True)
					return

		self.transport.processEnded(reason=failure.Failure(error.ProcessTerminated(0)))

	def connectionLost(self, reason):
		print("Connection closed:", reason)


class ChrootSpecs(object):
	def __init__(self, directory, allowWrite, createOnly, noSymlinks, followExternalSymlinks):
		self.directory = self._fixDir(directory)
		self.allowWrite = allowWrite
		self.createOnly = createOnly
		self.noSymlinks = noSymlinks
		self.followExternalSymlinks = followExternalSymlinks

	def _fixDir(self, directory):
		return os.path.join(os.getcwd(), directory)


class LimitedSFTPAvatar(avatar.ConchUser):
	implements(conchinterfaces.ISession)

	def __init__(self, avatarId, chroot, debug=False):
		avatar.ConchUser.__init__(self)

		self.avatarId = avatarId
		self.chroot = chroot
		self.channelLookup['session'] = session.SSHSession
		self.subsystemLookup['sftp'] = filetransfer.FileTransferServer
		self.debug = debug
		self._scpprotocol = None

	def openShell(self, protocol):
		protocol.write("This SSH server runs SFTP only!\r\n")
		protocol.processEnded(reason=failure.Failure(error.ProcessTerminated(1)))

	def getPty(self, terminal, windowSize, attrs):
		return None

	def execCommand(self, protocol, cmd):
		cmdParts = shlex.split(cmd)
		if cmdParts[0] == "scp":
			print("Launching python scp subsystem for user")
			scpprotocol = SCPProtocol(cmdParts, self)

			protocol.makeConnection(session.wrapProtocol(scpprotocol))
			scpprotocol.makeConnection(protocol)
			self._scpprotocol = scpprotocol
		else:
			print("User tried to exec command '%s'" % (cmd,))
			self.openShell(protocol)

	def closed(self):
		pass

	def windowChanged(self, newWindowSize):
		pass
	
	def eofReceived(self):
		if self._scpprotocol:
			self._scpprotocol.eofReceived()


class LimitedSFTPServer:
	implements(conchinterfaces.ISFTPServer)

	def __init__(self, avatar):
		self.avatar = avatar
		self.chrootSpecs = avatar.chroot
		self.debug = avatar.debug

		# get chroot path without symlink
		self.chroot = os.path.realpath(self.chrootSpecs.directory).rstrip("/") + "/"
		self.chrootRe = re.compile("^%s(/.*)?$" % re.escape(self.chroot.rstrip("/")))

	@staticmethod
	def _statToAttrs(s):
		return {
			"size" : s.st_size,
			"uid" : s.st_uid,
			"gid" : s.st_gid,
			"permissions" : s.st_mode,
			"atime" : int(s.st_atime),
			"mtime" : int(s.st_mtime)
		}

	def gotVersion(self, otherVersion, otherExt):
		return {}

	def realPath(self, path):
		realpath = os.path.abspath("/" + path.lstrip("/"))
		if self.debug:
			print(" >> realpath called for", path, "==>", realpath, file=sys.stderr)
		return realpath

	def _fixPath(self, path, isStatCall=False):
		abspath = os.path.abspath("/" + path).lstrip("/")

		result = os.path.join(self.chroot, abspath)
		# ensure that path is in chroot
		if not self.chrootRe.match(result):
			if self.debug:
				print(" !! CHROOT: Link is not inside chroot, whyever (chroot: %s, old: %s, joined: %s)" % (self.chroot, abspath, result))
			raise SFTPError(FX_PERMISSION_DENIED, "CHROOT: Link is not inside chroot, whyever (chroot: %s, old: %s, joined: %s)" % (self.chroot, abspath, result))

		# check if path is a symlink and is outside
		realpath = os.path.realpath(result)
		if not self.chrootRe.match(realpath) and not self.chrootSpecs.followExternalSymlinks:
			# if the result path is inside the chroot and a symlink and someone wants to do a stat on it then we'll allow it, else not
			if not (self.chrootRe.match(result) and os.path.exists(result) and os.path.islink(result) and isStatCall):
				print("CHROOT: Link is not inside chroot and following symlinks outside chroot is forbidden (path: %s, realpath: %s)" % (result, realpath))
				raise SFTPError(FX_PERMISSION_DENIED, "CHROOT: Link is not inside chroot and following symlinks outside chroot is forbidden (path: %s, realpath: %s)" % (result, realpath))

		if self.debug:
			print("fixPath: %s (%s) ==(%s)==> %s" % (path, realpath, self.chroot, result))


		return result

	def getAttrs(self, path, followLinks):
		if self.debug:
			print(" >> getAttrs", path, followLinks)

		result = None
		myPath = None
		if followLinks:
			myPath = self._fixPath(path)
			result = os.lstat(myPath)
		else:
			myPath = self._fixPath(path, isStatCall=True)
			result = os.stat(myPath)

		resultDict = self._statToAttrs(result)
		resultDict["isDir"] = os.path.isdir(myPath)

		return resultDict

	def openDirectory(self, path):
		realpath = self._fixPath(path)
		if self.debug:
			print(" >> openDirectory", path, "==>", realpath, file=sys.stderr)
		return SFTPDirectory(realpath)

	def makeDirectory(self, path, attrs):
		realpath = self._fixPath(path)
		if self.debug:
			print(" >> makeDirectory", path, attrs, realpath, file=sys.stderr)
		if not self.chrootSpecs.allowWrite or self.chrootSpecs.createOnly:
			raise SFTPError(FX_PERMISSION_DENIED, "Directory creation not allowed (path: %s)" % path)
		os.mkdir(realpath)
		self._setAttrs(path, attrs)

	def setAttrs(self, path, attrs):
		if self.debug:
			print(" >> setAttrs", path, attrs, file=sys.stderr)
		if self._fixPath(path) == self.chroot:
			raise SFTPError(FX_PERMISSION_DENIED, "Calling setAttr on root directory is not allowed")
		if not self.chrootSpecs.allowWrite or self.chrootSpecs.createOnly:
			raise SFTPError(FX_PERMISSION_DENIED, "Mode-changing not allowed")
		self._setAttrs(path, attrs)

	def _setAttrs(self, path, attrs):
		realpath = self._fixPath(path)

		if "permissions" in attrs:
			os.chmod(realpath, attrs["permissions"] & 0777)

	def openFile(self, filename, flags, attrs):
		if self.debug:
			print(" >> openFile", filename, flags, attrs, file=sys.stderr)

		return SFTPFile(self, self._fixPath(filename), flags, attrs, allowWrite=self.chrootSpecs.allowWrite)

	def removeFile(self, filename):
		if self.debug:
			print(" >> removeFile", filename, file=sys.stderr)
		if self.chrootSpecs.allowWrite:
			realpath = self._fixPath(filename, isStatCall=True)
			os.unlink(realpath)
			print("User '%s' removed file '%s'" % (self.avatar.avatarId, filename))
		else:
			raise SFTPError(FX_PERMISSION_DENIED, "Writing is not allowed")

	def renameFile(self, oldpath, newpath):
		if self.debug:
			print(" >> renameFile '%s' to '%s'" % (oldpath, newpath), file=sys.stderr)
		if self.chrootSpecs.allowWrite:
			if self.chrootSpecs.createOnly:
				raise SFTPError(FX_PERMISSION_DENIED, "In create-only mode, no renaming allowed")
			realoldpath = self._fixPath(oldpath)
			realnewpath = self._fixPath(newpath)
			os.rename(realoldpath, realnewpath)
		else:
			raise SFTPError(FX_PERMISSION_DENIED, "Writing (and therefore renaming) is not allowed")

	def removeDirectory(self, path):
		if self.debug:
			print(" >> removeDirectory", path, file=sys.stderr)
		if self.chrootSpecs.allowWrite:
			if self.chrootSpecs.createOnly:
				raise SFTPError(FX_PERMISSION_DENIED, "In create-only mode, deleting directories is not allowed")
			realpath = self._fixPath(path)
			os.rmdir(realpath)
		else:
			raise SFTPError(FX_PERMISSION_DENIED, "Writing (and therefore deleting directories) is not allowed")

	def makeLink(self, linkPath, targetPath):
		if self.debug:
			print(" >> makeLink %s --> %s" % (targetPath, linkPath), file=sys.stderr)
		if self.chrootSpecs.allowWrite:
			realTargetPath = self._fixPath(targetPath)

			if self.chrootSpecs.noSymlinks:
				raise SFTPError(FX_PERMISSION_DENIED, "Symlink creation are not allowed")
			if self.chrootSpecs.createOnly and os.path.exists(realTargetPath):
				raise SFTPError(FX_PERMISSION_DENIED, "File already exists (create-only mode)")

			realLinkPath = os.path.realpath(os.path.join(self.chroot, linkPath))
			if not self.chrootRe.match(realLinkPath):
				print("Creating symlinks to files outside of the chroot is forbidden (target was: %s)" % realLinkPath)
				raise SFTPError(FX_PERMISSION_DENIED, "Creating symlinks to files outside of the chroot is forbidden (target was: %s)" % realLinkPath)

			os.symlink(linkPath, realTargetPath)
		else:
			raise SFTPError(FX_PERMISSION_DENIED, "Writing is not allowed")

	def readLink(self, path):
		realpath = self._fixPath(path, isStatCall=True)
		targetPath = os.readlink(realpath)

		if self.debug:
			print(" >> readlink %s --> %s" % (path, targetPath), file=sys.stderr)
		return targetPath
components.registerAdapter(LimitedSFTPServer, LimitedSFTPAvatar, filetransfer.ISFTPServer)


class SFTPDirectory:
	def __init__(self, path):
		self.path = path
		self.files = os.listdir(self.path)

	def __iter__(self):
		return self

	def next(self):
		if len(self.files) > 0:
			fname = self.files.pop(0)
			fstat = os.lstat(os.path.join(self.path, fname))
			longname = lsLine(fname, fstat)
			attrs = LimitedSFTPServer._statToAttrs(fstat)
			
			return (fname, longname, attrs)
		else:
			raise StopIteration

	def close(self):
		self.files = []


class SFTPFile:
	implements(conchinterfaces.ISFTPFile)

	def __init__(self, server, filename, flags, attrs, allowWrite=False):
		self.server = server
		self.allowWrite = allowWrite
		self.filename = filename
		openFlags = 0
		mode = 0777
		isWrite = False

		if self.server.debug:
			print(" >> SFTPFile: open %s with flags %s and attrs %s" % (filename, flags, attrs), file=sys.stderr)

		if flags & FXF_WRITE == FXF_WRITE:
			isWrite = True
			if self.server.chrootSpecs.allowWrite:
				if self.server.chrootSpecs.createOnly and os.path.exists(filename):
					raise SFTPError(FX_PERMISSION_DENIED, "File already exists")
				if flags & FXF_WRITE == FXF_WRITE and flags & FXF_READ == FXF_READ:
					openFlags = os.O_RDWR
				else:
					openFlags = os.O_WRONLY

				if flags & FXF_APPEND == FXF_APPEND:
					openFlags |= os.O_APPEND
				if flags & FXF_CREAT == FXF_CREAT:
					openFlags |= os.O_CREAT
				if flags & FXF_TRUNC == FXF_TRUNC:
					openFlags |= os.O_TRUNC
				if flags & FXF_EXCL == FXF_EXCL:
					 openFlags |= os.O_EXCL
			else:
				raise SFTPError(FX_PERMISSION_DENIED, "Write not allowed")
		elif flags & FXF_READ == FXF_READ:
			# ignore all other options, readonly
			openFlags = os.O_RDONLY
		else:
			# unknown mode
			raise SFTPError(FX_PERMISSION_DENIED, "Unknown permission flags '%s'" % flags)

		if "permissions" in attrs:
			mode = attrs["permissions"] & 0777
			del(attrs["permissions"])
		else:
			mode = 0777

		print("User '%s' is opening file '%s' for %s (mode %04o)" % (server.avatar.avatarId, filename, "writing" if isWrite else "reading", mode))
		self.fd = os.open(filename, openFlags, mode)
		if attrs:
			self.server._setAttrs(filename, attrs)

	def close(self):
		print("File %s closed" % (self.filename,))
		os.close(self.fd)

	def readChunk(self, offset, length):
		os.lseek(self.fd, offset, os.SEEK_SET)
		return os.read(self.fd, length)

	def writeChunk(self, offset, data):
		if self.server.chrootSpecs.allowWrite:
			os.lseek(self.fd, offset, os.SEEK_SET)
			return os.write(self.fd, data)
		else:
			raise SFTPError(FX_PERMISSION_DENIED, "SFTPFile %s is read only!" % (self.filename))

	def getAttrs(self):
		stat = os.fstat(self.fd)
		return LimitedSFTPServer._statToAttrs(stat)

	def setAttrs(self, attrs):
		raise NotImplementedError()


class SFTPRealm(object):
	implements(portal.IRealm)

	def __init__(self, chroot, debug):
		self.chroot = chroot
		self.debug = debug

	def requestAvatar(self, avatarId, mind, *interfaces):
		print("User '%s' logged in" % (avatarId,))
		if conchinterfaces.IConchUser in interfaces:
			return interfaces[0], LimitedSFTPAvatar(avatarId, self.chroot, self.debug), lambda: self.reportConnClosed(avatarId)

	def reportConnClosed(self, username):
		print("User %s closed the connection" % (username,))


class NoneAuthorization:
	""" NoneAuthorization - "Passwordless" authorization

	We use IPluggableAuthenticationModules as interface so ssh sends keyboard-interactive
	as authentication method. Then we can instantly send an "okay" back. Newer versions
	of twisted-conch also support none-authentication (see [0]). For this to work this
	class also implements the IAnonymous credential interface.

	[0] http://twistedmatrix.com/users/diffresource.twistd/5531
	"""
	implements(checkers.ICredentialsChecker)
	credentialInterfaces = (cred.credentials.IPluggableAuthenticationModules, cred.credentials.IAnonymous,)

	def requestAvatarId(self, credentials):
		return internet.defer.succeed(str(credentials.username))


class SSHAuthorizedKeysFile(conchcheckers.SSHPublicKeyDatabase):
	def __init__(self, files):
		self.files = files

	def getAuthorizedKeysFiles(self, credentials):
		return [filepath.FilePath(f) for f in self.files]


def _parser():
	parser = argparse.ArgumentParser(description="Serve a directory via SFTP")

	sftpgroup = parser.add_argument_group("SFTP")
	sftpgroup.add_argument("target", type=str, help="Directory to serve")
	sftpgroup.add_argument("-p", "--port", default=2222, type=int, help="Port to run the sftp server on (Default: 2222)")
	sftpgroup.add_argument("-k", "--hostkey", metavar="hostkey", default=None, type=str, help="Hostkey to use. You only need to specify the private key")

	# filesystem stuff
	fsgroup = parser.add_argument_group("filesystem")
	fsgroup.add_argument("-w", "--writable", default=False, action="store_true", help="Allow write operations (creating/changing/renaming/deleting files and directories)")
	fsgroup.add_argument("--co", "--create-only", default=False, action="store_true", help="Only allow creation of files and directory, but no modification/deletion. Used with -w")
	fsgroup.add_argument("--ns", "--no-symlinks", default=False, action="store_true", help="Disallow creation of symlinks (Note: symlinks outside of the given directory are not allowed)")
	fsgroup.add_argument("--fe", "--follow-external", default=False, action="store_true", help="Follow external symlinks (symlinks that point outside of the chroot)")

	# user management/authorization/access
	# TODO: Web-command (aka "download this authorized keys file" or "use this authorized keys command")
	authgroup = parser.add_argument_group("authorization")
	authgroup.add_argument("-n", "--nullauth", default=False, action="store_true", help="Null-authentication. No authentication will be done, every user/password combination wins!")
	authgroup.add_argument("-u", "--users", metavar="users", default=None, type=str, help="List of user/password combinations. Format: user1:passs1,user2:pass2,...")
	authgroup.add_argument("-a", "--authorized-keys", metavar="authorized keys file", default=None, type=str, help="Path to an authorized_keys file filled with ssh publickeys")

	# misc
	parser.add_argument("-d", "--debug", default=False, action="store_true", help="Enable twisted's debug facilities")
	parser.add_argument('--version', action='version', version='%(prog)s ' + __version__)

	return parser


def main():
	parser = _parser()
	args = parser.parse_args()

	if not args.users and not args.nullauth and not args.authorized_keys:
		parser.error("No authorization chosen, please specify one with -n, -a or -u.")

	# fire up ssh server
	targetWasCreated = False
	if not os.path.exists(args.target):
		if not args.writable:
			print("Warning: You specified a non-existing target but didn't allow it to be writable.")
			print("         You will basically serve an empty directory (which I will create for you).")
		print("Creating target directory")
		os.mkdir(args.target)
		targetWasCreated = True
	elif not os.path.isdir(args.target):
		parser.error("Target needs to be a directory")

	chroot = ChrootSpecs(args.target, args.writable, args.co, args.ns, args.fe)

	realm = SFTPRealm(chroot, args.debug)

	sshFactory = factory.SSHFactory()
	sshFactory.portal = portal.Portal(realm)

	# hostkey handling
	privateKey = None

	try:
		if args.hostkey:
			privateKey = keys.Key.fromString(data=open(args.hostkey).read())
		else:
			confPath = os.path.expanduser("~/.servesftp/")
			keyPath = os.path.join(confPath, "hostkey")
			if os.path.exists(keyPath):
				# load key from user's home
				privateKey = keys.Key.fromString(data=open(keyPath).read())
			else:
				bits = 2048
				print("Generating %sbit RSA hostkey..." % bits)
				rsaKey = RSA.generate(bits)
				privateKey = keys.Key.fromString(data=rsaKey.exportKey("PEM"))

				try:
					if not os.path.exists(confPath):
						os.mkdir(confPath)
					keyFile = open(keyPath, "w")
					keyFile.write(rsaKey.exportKey("PEM") + "\n")
					keyFile.close()
				except (OSError, IOError) as e:
					print("Warning: Could not save private key to %s: %s" % (keyPath, e))
	except IOError as e:
		print("Error: Could not open private hostkey: %s" % (e,))
		privateKey = None
	except keys.BadKeyError:
		print("Error: The specified key is not in an understandable format!")
		privateKey = None

	if not privateKey:
		print("No feasible hostkey could be found")
		sys.exit(1)

	if privateKey.isPublic():
		print("You specified a public key as hostkey but a private one is needed.")
		sys.exit(1)

	sshFactory.publicKeys  = {'ssh-rsa': privateKey.public()}
	sshFactory.privateKeys = {'ssh-rsa': privateKey}

	# user access
	if args.nullauth:
		sshFactory.portal.registerChecker(NoneAuthorization())

	if args.authorized_keys:
		sshFactory.portal.registerChecker(SSHAuthorizedKeysFile([args.authorized_keys]))

	if args.users:
		users = args.users.split(",")
		userdb = {}
		error = False
		for i, user in enumerate(users, 1):
			if ":" not in user:
				print("Error: User number %d (%s) is missing a password!" % (i, user), file=sys.stderr)
				error = True
			else:
				user, password = user.split(":")
				if len(user) <= 0:
					print("Error: User number %d has an empty username" % (i,), file=sys.stderr)
					error = True
				elif len(password) <= 0:
					print("Error: User number %d (%s) has an empty password" % (i, user), file=sys.stderr)
					error = True
				else:
					userdb[user] = password

		if error:
			sys.exit(1)
		
		# I actually don't care if they name their class "DontUse". It perfectly fits the need
		# of a in-memory store for invaluable throw-away passwords.
		sshFactory.portal.registerChecker(checkers.InMemoryUsernamePasswordDatabaseDontUse(**userdb))

	if args.debug:
		log.startLogging(sys.stdout)

	try:
		reactor.listenTCP(args.port, sshFactory)
	except internet.error.CannotListenError as e:
		print("Error binding to port: %s" % (e,))
		sys.exit(1)

	print("\nServing directory %s on port %d\n" % (args.target, args.port))

	# run the thing!
	reactor.run()

	# cleanup
	if targetWasCreated:
		# try to delete directory, if was left empty
		try:
			os.rmdir(args.target)
		except OSError:
			pass
	print("Good bye")

if __name__ == "__main__":
	main()
